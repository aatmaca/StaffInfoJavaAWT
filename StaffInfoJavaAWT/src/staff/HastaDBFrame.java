package staff;
import java.sql.*;
/** * * @author  Atmaca */
public class HastaDBFrame extends javax.swing.JFrame {
    
    /** Creates new form HastaDBFrame */
    public HastaDBFrame() {
        
        listModel = new javax.swing.DefaultListModel();
        
        initComponents();
        
        pictureList.setModel(listModel);
        
        java.awt.event.MouseListener mouseListener = new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    index = pictureList.locationToIndex(e.getPoint());
                    if(opened)
                        frame.dispose();
                    showGraph(index);
                }
                if (e.getClickCount() == 1) {
                    index2 = pictureList.locationToIndex(e.getPoint());
                }
            }
        };
        pictureList.addMouseListener(mouseListener);
        
        loadOnce();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        arama = new javax.swing.JComboBox();
        kriter = new javax.swing.JTextField();
        bul = new javax.swing.JButton();
        iptal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tauyg = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfyas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfadr = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tftel = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfcep = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfgelis = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfrandevu = new javax.swing.JTextField();
        tfopr = new javax.swing.JTextField();
        cins = new javax.swing.JComboBox();
        l13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pictureList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        gSil = new javax.swing.JButton();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Kayýt Tarama Ekraný");
        jDialog1.setBackground(java.awt.Color.lightGray);
        jDialog1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialog1.setForeground(java.awt.Color.white);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel12.setText("Arama Çeþidi");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel13.setText("Arama Kriteri");

        arama.setFont(new java.awt.Font("Tahoma", 1, 12));
        arama.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ýsme Göre", "ID Numarasýna Göre", "Operasyona Göre" }));
        arama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aramaActionPerformed(evt);
            }
        });

        kriter.setFont(new java.awt.Font("Tahoma", 1, 12));
        kriter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kriterActionPerformed(evt);
            }
        });

        bul.setText("Bul");
        bul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bulActionPerformed(evt);
            }
        });

        iptal.setText("Ýptal");
        iptal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iptalActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(arama, 0, 405, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(kriter, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(bul, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(iptal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel5Layout.linkSize(new java.awt.Component[] {bul, iptal}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(arama, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(kriter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 43, Short.MAX_VALUE)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bul)
                    .add(iptal))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tauyg.setColumns(20);
        tauyg.setFont(new java.awt.Font("Arial", 0, 13));
        tauyg.setRows(5);
        jScrollPane1.setViewportView(tauyg);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HastaDB 6.0");
        setBackground(new java.awt.Color(204, 204, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Kayýt", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 153, 153), new java.awt.Color(204, 204, 255), null, null))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Hastanýn Adý - Soyadý:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Yaþý:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Cinsiyeti:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Adresi:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Ev Telefonu:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("Cep Telefonu:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel7.setText("E-mail:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Geliþ Tarihi:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel9.setText("Sonraki Randevu Tarihi:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel10.setText("Operasyon");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel11.setText("Hasta No:");

        cins.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BAYAN", "ERKEK" }));

        l13.setFont(new java.awt.Font("Tahoma", 1, 12));
        l13.setText("jLabel12");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tfad, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(jLabel3)
                    .add(tfyas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7)
                    .add(jLabel8)
                    .add(jLabel9)
                    .add(jLabel10)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(l13)
                        .add(145, 145, 145))
                    .add(cins, 0, 263, Short.MAX_VALUE)
                    .add(tfadr, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tftel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tfcep, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tfmail, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tfgelis, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tfrandevu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(tfopr, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .add(jLabel2)
                    .add(jLabel1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfyas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cins, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfadr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tftel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfcep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfgelis, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfrandevu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfopr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(l13)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Uygulamalar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 441, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 561, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Görüntü", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jScrollPane3.setViewportView(pictureList);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
        );

        jButton1.setText("Ýlk");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Önceki");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sonraki");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Son");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Kayýt Ekle");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Kayýt Bul");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Kaydet");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Güncelle");

        jButton11.setText("Kayýt Sil");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        gSil.setText("Görüntü Sil");
        gSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gSilActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(367, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jButton5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton8))
                            .add(layout.createSequentialGroup()
                                .add(jButton1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton4)))
                        .add(77, 77, 77)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(gSil)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jButton11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(237, 237, 237)))
                        .addContainerGap(16, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        layout.linkSize(new java.awt.Component[] {gSil, jButton11}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(gSil)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton11))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton1)
                            .add(jButton2)
                            .add(jButton3)
                            .add(jButton4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton5)
                            .add(jButton6)
                            .add(jButton7)
                            .add(jButton8))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    /**
     *
     * @param evt
     */        
    private void gSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gSilActionPerformed
// TODO add your handling code here:
        deleteGraph();
    }//GEN-LAST:event_gSilActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
        Connection con;
        Statement stmt;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE );
            ResultSet srs = stmt.executeQuery("SELECT * FROM HASTA WHERE ID = " + current() + " FOR UPDATE");
            srs.next();
            srs.updateString("AD", tfad.getText().trim());
            srs.updateString("ADRES", tfadr.getText().trim());
            srs.updateString("CEPTEL", tfcep.getText().trim());
            srs.updateString("GELISTARIHI", tfgelis.getText().trim());
            srs.updateString("EMAIL", tfmail.getText().trim());
            srs.updateString("OPERASYON", tfopr.getText().trim());
            srs.updateString("SONRAKIRANDEVU", tfrandevu.getText().trim());
            srs.updateString("EVTEL", tftel.getText().trim());
            srs.updateInt("DOGUMYILI", Integer.parseInt(tfyas.getText().trim()));
            srs.updateString("UYGULAMALAR", tauyg.getText().trim());
            srs.updateString("CINSIYET", (cins.getSelectedIndex() == 1) ? "ERKEK" : "BAYAN");
            srs.updateRow();
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
//        try {
//            server.shutdown();
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_formWindowClosing
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
        if(save() == 0)
            return;
        jDialog1.pack();
        jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// TODO add your handling code here:
        save();
    }//GEN-LAST:event_jButton7ActionPerformed
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
        add();
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        loadLast();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        sonraki();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        onceki();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        loadFirst();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
// TODO add your handling code here:
        delete();
    }//GEN-LAST:event_jButton11ActionPerformed
    
    private void bulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bulActionPerformed
        
        int[]results = null;
        if(kriter.getText().trim().equals("")){
            javax.swing.JOptionPane.showMessageDialog(this,"Kriter girmediniz");
            jDialog1.setVisible(true);
            return;
        }
        
        if(arama.getSelectedIndex()==0){
            results = findHastaByName(kriter.getText().trim());
        }else if(arama.getSelectedIndex() == 1){
            try {
                Integer.parseInt(kriter.getText().trim());
            } catch (Exception ex) {
                javax.swing.JOptionPane.showMessageDialog(this,"Sadece rakam girmeniz gerekiyor");
                jDialog1.setVisible(true);
                return;
            }
            results = findHastaByID(kriter.getText().trim());
        }else{
            results = findHastaByOperation(kriter.getText().trim());
        }
        
        if(results == null){
            javax.swing.JOptionPane.showMessageDialog(this,"Kayit bulunamadi");
            jDialog1.setVisible(true);
            return;
        }
        
        String []resultList = new String[results.length];
        for( int i = 0;i<resultnames.size();i++){
            resultList[i] = resultnames.get(i);
        }
        
        javax.swing.JList list = new javax.swing.JList(resultList);
        list.setSelectedIndex(0);
        
        javax.swing.JScrollPane jsp = new javax.swing.JScrollPane(list);
        jsp.setSize(220,400);
        javax.swing.JOptionPane.showMessageDialog(this,jsp);
        
        load(results[list.getSelectedIndex()]);
        jDialog1.dispose();
    }//GEN-LAST:event_bulActionPerformed
    
    private void iptalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iptalActionPerformed
// TODO add your handling code here:
        jDialog1.dispose();
    }//GEN-LAST:event_iptalActionPerformed

private void aramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aramaActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_aramaActionPerformed

private void kriterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kriterActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_kriterActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        org.apache.derby.drda.NetworkServerControl server = null;
//        try {
//            server = new org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName("0.0.0.0"), 1527);
//        } catch (UnknownHostException ex) {
//            ex.printStackTrace();
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//        try {
//            server.start(null);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
       
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HastaDBFrame().setVisible(true);
            }
        });
    }
    
    private int findBiggestID(){
        Connection con;
        Statement stmt;
        int id = 0, biggest = 0;
        try {
//            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            ResultSet srs = stmt.executeQuery("SELECT * FROM HASTA");
            
            while (srs.next()) {
                id = srs.getInt("ID");
                if (id > biggest)
                    biggest = id;
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        return biggest;
    }
    
    private int findSmallestID(){
        Connection con;
        Statement stmt;
        int id = 0, smallest = 100000;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            ResultSet srs = stmt.executeQuery("SELECT * FROM HASTA");
            
            while (srs.next()) {
                id = srs.getInt("ID");
                if (id < smallest)
                    smallest = id;
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        return smallest;
    }
    
    private void load(int id){        
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA WHERE ID = " + id );
            srs.next();
            if(id==0){
                this.tfad.setText("");
                this.tfadr.setText("");
                this.tfcep.setText("");
                this.tfgelis.setText("");
                this.tfmail.setText("");
                this.tfopr.setText("");
                this.tfrandevu.setText("");
                this.tftel.setText("");
                this.tfyas.setText("");
                this.tauyg.setText("");
                this.cins.setSelectedIndex(0);
            }else{
                this.tfad.setText(srs.getString("AD"));
                this.tfadr.setText(srs.getString("ADRES"));
                this.tfcep.setText(srs.getString("CEPTEL"));
                this.tfgelis.setText(srs.getString("GELISTARIHI"));
                this.tfmail.setText(srs.getString("EMAIL"));
                this.tfopr.setText(srs.getString("OPERASYON"));
                this.tfrandevu.setText(srs.getString("SONRAKIRANDEVU"));
                this.tftel.setText(srs.getString("EVTEL"));
                this.tfyas.setText(srs.getInt("DOGUMYILI")+"");
                this.tauyg.setText(srs.getString("UYGULAMALAR"));
                this.cins.setSelectedIndex((srs.getString("CINSIYET").equalsIgnoreCase("ERKEK") )? 1 : 0);
                this.l13.setText(""+id);
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        listGraph();
    }
    
    public int current() {
        return Integer.parseInt(l13.getText());
    }
    
    private void listGraph() {
        JpegConverter();
        listModel.clear();
        int id = current();
        if(!new java.io.File("DATA\\graphs\\"+ id).exists())
            new java.io.File("DATA\\graphs\\"+ id).mkdir();
        java.io.File outputFile = new java.io.File("DATA\\graphs/"+id);
        String[] listOfFiles = outputFile.list();
        images = new javax.swing.ImageIcon[listOfFiles.length];
        for (int i = 0, y = 0; i < listOfFiles.length; i++) {
            if(! listOfFiles[i].equalsIgnoreCase("thumbs.db") ){
                images[y] = new javax.swing.ImageIcon("DATA\\graphs\\" +id+"\\" +listOfFiles[i]);
                if (images[y] != null) {
                    images[y].setDescription(listOfFiles[i]);
                    listModel.addElement(new javax.swing.ImageIcon(images[y].getImage().getScaledInstance(195, 144, 1)));
                    listModel.addElement(listOfFiles[i]);
                }
                y++;
            }
        }
    }
    
    private void add() {
        int curr = current(), id = findBiggestID()+1;
        if(save() == 0)
            return;
        
        Connection con;
        Statement stmt;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        String s = new java.util.Date().toString();
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            stmt.executeUpdate("insert into HASTA values (" + id + ", '', 0, 'BAYAN', '', ''," +
                    " '', '', '"+ s +"', '', '','')");
            
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        // Create a directory; all ancestor directories must exist
        boolean success = (new java.io.File("graphs\\" + id)).mkdir();
        
        load(id);
        
    }
    
    private void loadOnce(){
        load(findBiggestID());
    }
    
    private void loadLast(){
        if(save() == 0)
            return;
        load(findBiggestID());
    }
    
    private void loadFirst(){
        if(save() == 0)
            return;
        load(findSmallestID());
    }
    
    private void onceki(){
        int tid, id = 0, curr = current();
        if(findSmallestID() == curr)
            return;
        if(save() == 0)
            return;
                
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA ORDER BY ID");
            
            while(srs.next()){
                tid = srs.getInt("ID");
                if (tid == curr)
                    break;
                id = tid;
            }
            
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        load(id);
    }
    
    private void sonraki(){
        int tid, curr = current(), id = curr;
        if(findBiggestID() == curr)
            return;
        if(save() == 0)
            return;
                
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA ORDER BY ID");
            while(srs.next()){
                tid = srs.getInt("ID");
                if (tid == curr)
                    break;
            }
            srs.next();
            id = srs.getInt("ID");
            
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        load(id);
    }
    
    private int save(){
        int id = current();
        if(tfad.getText().trim().equals("")){
            javax.swing.JOptionPane.showMessageDialog(this,"Isim girmediniz!");
            return 0;
        }
        
        try{
            Integer.parseInt(tfyas.getText().trim());
        }catch(Exception ex){
            javax.swing.JOptionPane.showMessageDialog(this,"Hastan?n ya??n? girmediniz!");
            return 0;
        }
        
        if(tfgelis.getText().trim().equals("")){
            javax.swing.JOptionPane.showMessageDialog(this,"Gelis tarihini girmediniz!");
            return 0;
        }
        if(tauyg.getText().trim().length()> 32400 ){
            javax.swing.JOptionPane.showMessageDialog(this,"UYGULAMALAR k?sm?na girdi?iniz bilgi " +
                    "Database Sisteminin tutabilece?inden fazla. Lütfen gereksiz bilgileri silip tekrar deneyiniz.");
            return 0;
        }
        
        Connection con;
        Statement stmt;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE );
            ResultSet srs = stmt.executeQuery("SELECT * FROM HASTA WHERE ID = " + id + " FOR UPDATE");
            srs.next();
            srs.updateString("AD", tfad.getText().trim());
            srs.updateString("ADRES", tfadr.getText().trim());
            srs.updateString("CEPTEL", tfcep.getText().trim());
            srs.updateString("GELISTARIHI", tfgelis.getText().trim());
            srs.updateString("EMAIL", tfmail.getText().trim());
            srs.updateString("OPERASYON", tfopr.getText().trim());
            srs.updateString("SONRAKIRANDEVU", tfrandevu.getText().trim());
            srs.updateString("EVTEL", tftel.getText().trim());
            srs.updateInt("DOGUMYILI", Integer.parseInt(tfyas.getText().trim()));
            srs.updateString("UYGULAMALAR", tauyg.getText().trim());
            srs.updateString("CINSIYET", (cins.getSelectedIndex() == 1) ? "ERKEK" : "BAYAN");
            srs.updateRow();
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        load(id);
        return 1;
    }
    
    public int[] findHastaByName(String cri) {
        java.util.ArrayList<Integer> results = new java.util.ArrayList<Integer>();
        resultnames = new java.util.ArrayList<String>();
        String name;
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA");
            while(srs.next()){
                name = srs.getString("AD");
                if(name.toUpperCase().contains(cri.toUpperCase())){
                    results.add(srs.getInt("ID"));
                    resultnames.add(name);
                }
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if(results.size()>0){
            int []res = new int[results.size()];
            for(int i = 0;i<results.size();i++){
                res[i] = results.get(i).intValue();
            }
            return res;
        }else return null;
    }
    
    public int[] findHastaByOperation(String cri) {
        java.util.ArrayList<Integer> results = new java.util.ArrayList<Integer>();
        resultnames = new java.util.ArrayList<String>();
        String name;
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA");
            while(srs.next()){
                name = srs.getString("OPERASYON");
                if(name.toUpperCase().contains(cri.toUpperCase())){
                    results.add(srs.getInt("ID"));
                    resultnames.add(srs.getString("AD"));
                }
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        
        if(results.size()>0){
            int []res = new int[results.size()];
            for(int i = 0;i<results.size();i++){
                res[i] = results.get(i).intValue();
            }
            return res;
        }else return null;
    }
    
    public int[] findHastaByID(String cri) {
        java.util.ArrayList<Integer> results = new java.util.ArrayList<Integer>();
        resultnames = new java.util.ArrayList<String>();        
        int name;
        Connection con;
        Statement stmt;
        ResultSet srs;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        try {
            con = DriverManager.getConnection(url, "admin", "adminadmin");
            stmt = con.createStatement();
            srs = stmt.executeQuery("SELECT * FROM HASTA");
            while(srs.next()){
                name = srs.getInt("ID");
                if(name == Integer.parseInt(cri)){
                    results.add(new Integer(srs.getInt("ID")));
                    resultnames.add(srs.getString("AD"));
                }
            }
            stmt.close();
            con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        if(results.size()>0){
            int []res = new int[results.size()];
            for(int i = 0;i<results.size();i++){
                res[i] = results.get(i).intValue();
            }
            return res;
        }else return null;
    }
    
    private void delete() {
        int curr = current();
        int z = javax.swing.JOptionPane.showConfirmDialog(null,"Hasta kaydini silmek istediginizden emin misiniz?", "KAYIT SIL", javax.swing.JOptionPane.YES_NO_OPTION);
        if(z==0){
            Connection con;
            Statement stmt;
            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException ex) {
                ex.printStackTrace();
            }
            try {
                con = DriverManager.getConnection(url, "admin", "adminadmin");
                stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                stmt.executeUpdate("DELETE FROM HASTA WHERE ID = " + curr);
                stmt.close();
                con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            if(opened)
                frame.dispose();
            
            deleteDir(new java.io.File("DATA\\graphs\\" + curr));
            deleteDir(new java.io.File("DATA\\videos\\" + curr));
            load(findBiggestID());
        }
    }
    
    public static boolean deleteDir(java.io.File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i=0; i<children.length; i++) {
                boolean success = deleteDir(new java.io.File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        // The directory is now empty so delete it
        return dir.delete();
    }
    
    private void JpegConverter() {
        String imagesDir = "DATA\\BMP";
        java.io.File cwd = new java.io.File(imagesDir);
        java.io.File files[] = cwd.listFiles();
        java.io.File recurrence;
        int r = 1;
        for (int i = 0; i < files.length; ++i) {
            String fileName = files[i].getName();
            String fileNameLC = fileName.toLowerCase();
            
            if (fileName.endsWith("bmp")) {
                try {
                    String targetDir = fileName.substring(0,fileName.indexOf("_"));
                    // Replace original "bmp" filename extension with "jpg"
                    int extensionIndex = fileNameLC.lastIndexOf(".bmp");
                    String fileNameBase = fileName.substring(0, extensionIndex);
                    java.awt.image.BufferedImage img = javax.imageio.ImageIO.read(files[i]);
                    // create new JPEG file
                    java.io.File convertedImgFile = new java.io.File("DATA/graphs/"+targetDir + java.io.File.separator + fileNameBase + ".jpg");
                    recurrence = new java.io.File("DATA/graphs/"+targetDir + java.io.File.separator + fileNameBase + ".jpg");
                    while(recurrence.exists()){
                        convertedImgFile = new java.io.File("DATA/graphs/"+targetDir + java.io.File.separator + fileNameBase + r +".jpg");
                        recurrence = convertedImgFile;
                        r++;
                    }
                    // store original file out in JPEG format
                    javax.imageio.ImageIO.write(img, "jpeg", convertedImgFile);
                    files[i].delete();
                } catch (Exception e) {
                    System.out.println("Problem with " + files[i]);
                }
            }
        }
    }
    
    private void deleteGraph(){
        int z = javax.swing.JOptionPane.showConfirmDialog(null,"Grafigi silmek istediginizden emin misiniz?", "GRAFIK SIL", javax.swing.JOptionPane.YES_NO_OPTION);
        if(z==0){
            listModel.clear();
            new java.io.File("DATA\\graphs\\" + current() + "\\" + images[index2/2].getDescription()).delete();
            listGraph();
        }
    }
    
    private void showGraph(int index){
        //Create and set up the window.
        frame = new javax.swing.JFrame(images[index/2].getDescription());
        javax.swing.JLabel label = new javax.swing.JLabel(images[index/2]);
        javax.swing.JScrollPane js = new javax.swing.JScrollPane(label);
        frame.add(js);
        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        opened = true;
    }
    
//    String url = "jdbc:derby://localhost:1527/HastaDB";
//    String url = "jdbc:derby://localhost:1527/C:\\Documents and Settings\\Atmaca\\.netbeans-derby\\HastaDB";
//    String url = "jdbc:derby://localhost:1527/C:/Documents and Settings/myJavaProjects/HastaDB/HastaDB";
    String url = "jdbc:derby://192.168.2.3:1527/" + "HastaDB";
    String vValue, vValue2;
//    public static org.apache.derby.drda.NetworkServerControl server = null;
    int index, index2;
    boolean opened = false, vOpened = false;
    javax.swing.ImageIcon[] images;
    javax.swing.JFrame frame;
    private javax.swing.DefaultListModel listModel;
    java.util.ArrayList<String> resultnames = new java.util.ArrayList<String>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox arama;
    private javax.swing.JButton bul;
    private javax.swing.JComboBox cins;
    private javax.swing.JButton gSil;
    private javax.swing.JButton iptal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField kriter;
    private javax.swing.JLabel l13;
    private javax.swing.JList pictureList;
    private javax.swing.JTextArea tauyg;
    private javax.swing.JTextField tfad;
    private javax.swing.JTextField tfadr;
    private javax.swing.JTextField tfcep;
    private javax.swing.JTextField tfgelis;
    private javax.swing.JTextField tfmail;
    private javax.swing.JTextField tfopr;
    private javax.swing.JTextField tfrandevu;
    private javax.swing.JTextField tftel;
    private javax.swing.JTextField tfyas;
    // End of variables declaration//GEN-END:variables
    
}